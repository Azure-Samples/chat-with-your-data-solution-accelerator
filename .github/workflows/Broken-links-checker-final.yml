name: Smart Broken Link Checker

on:
  pull_request:
    paths:
      - '**/*.md'
  workflow_dispatch:

permissions:
  contents: read

jobs:
  smart-link-check:
    name: Filtered Markdown Broken Links
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Install lychee
        run: |
          curl -Ls https://github.com/lycheeverse/lychee/releases/latest/download/lychee-linux.zip -o lychee.zip
          unzip lychee.zip -d lychee-bin
          chmod +x lychee-bin/lychee
          echo "$PWD/lychee-bin" >> $GITHUB_PATH

      - name: Determine Target Files
        id: target-files
        run: |
          if [[ "${{ github.event_name }}" == "pull_request" ]]; then
            git fetch origin ${{ github.base_ref }}
            files=$(git diff --name-only origin/${{ github.base_ref }}...HEAD | grep '\.md$' || true)
          else
            files=$(find . -type f -name "*.md")
          fi
          echo "$files" > all-md-files.txt
          echo "files=$(cat all-md-files.txt | paste -sd ' ' -)" >> $GITHUB_OUTPUT

      - name: Run Lychee (Initial)
        run: |
          mkdir -p lychee-output
          lychee --verbose --no-progress --exclude-mail --format json \
            ${{ steps.target-files.outputs.files }} > lychee-output/report.json
          # Also produce plain-text report for human reading
          lychee --verbose --no-progress --exclude-mail \
            ${{ steps.target-files.outputs.files }} > lychee-output/report.txt || true

      - name: Extract Failed Files
        id: extract-failed
        run: |
          mkdir -p sanitize-targets
          jq -r '.failures[].input' lychee-output/report.json | sort -u > failed-files.txt
          if [[ -s failed-files.txt ]]; then
            echo "files_to_sanitize=$(cat failed-files.txt | paste -sd ' ' -)" >> $GITHUB_OUTPUT
          fi

      - name: Sanitize Failed Files (Remove Comments)
        if: steps.extract-failed.outputs.files_to_sanitize != ''
        run: |
          mkdir -p sanitized_md
          while IFS= read -r file; do
            [ -f "$file" ] || continue
            mkdir -p "sanitized_md/$(dirname "$file")"
            perl -0777 -pe 's/<!--.*?-->//gs' "$file" > "sanitized_md/$file"
          done < failed-files.txt

      - name: Re-run Lychee on Sanitized Files
        if: steps.extract-failed.outputs.files_to_sanitize != ''
        run: |
          mkdir -p lychee-output-sanitized
          while IFS= read -r file; do
            [ -f "sanitized_md/$file" ] || continue
            echo "🔍 Rechecking: sanitized_md/$file"
            lychee --verbose --no-progress --exclude-mail "sanitized_md/$file" || echo "$file" >> final-failures.txt
          done < failed-files.txt

      - name: Upload Lychee Reports
        uses: actions/upload-artifact@v4
        with:
          name: lychee-original-reports
          path: lychee-output

      - name: Upload Sanitized Report Failures
        if: steps.extract-failed.outputs.files_to_sanitize != ''
        uses: actions/upload-artifact@v4
        with:
          name: lychee-sanitized-failures
          path: |
            final-failures.txt
            sanitized_md

      - name: Fail if Broken Links Remain
        if: failure() && steps.extract-failed.outputs.files_to_sanitize != ''
        run: |
          if [ -s final-failures.txt ]; then
            echo "🚫 Broken links still exist after comment-stripping:"
            cat final-failures.txt
            exit 1
          fi
