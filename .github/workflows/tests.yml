name: Tests

on:
  push:
    branches: [add-frontend-unit-tests-to-github]
  pull_request:
    branches: [main]
    types:
      - opened
      - ready_for_review
      - reopened
      - synchronize
  workflow_call:

jobs:
  test_package:
    name: Tests
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Get coverage artifact ID
        id: coverage-artifact
        uses: actions/github-script@v7
        with:
          script: |
            const workflows = await github.rest.actions.listRepoWorkflows({
              owner: context.repo.owner,
              repo: context.repo.repo,
            });

            const workflowId = workflows.data.workflows.find(workflow => workflow.name === "${{ github.workflow }}")?.id;

            if (!workflowId) return "";

            const workflowRuns = await github.rest.actions.listWorkflowRuns({
              owner: context.repo.owner,
              repo: context.repo.repo,
              workflow_id: workflowId,
              branch: "${{ github.base_ref }}",
              event: "push",
              status: "success",
            });

            return workflowRuns.data.workflow_runs[0]?.id ?? "";
          result-encoding: string
          retries: 3
      - name: Download main coverage artifact
        uses: actions/download-artifact@v4
        if: steps.coverage-artifact.outputs.result != ''
        continue-on-error: true # There is a chance that the artifact doesn't exist, or has expired
        with:
          name: coverage
          path: "${{ github.workspace }}/coverage-main"
          github-token: ${{ secrets.GITHUB_TOKEN }}
          run-id: ${{ steps.coverage-artifact.outputs.result }}
      - name: Get coverage from main
        id: coverage-value
        run: |
          MIN_COVERAGE=0

          if [[ -f "./coverage-main/coverage.xml" ]]; then
            MIN_COVERAGE=$(grep -m 1 "<coverage" "./coverage-main/coverage.xml" | sed -E 's/.*line-rate="([^"]*)".*/\1/') # Extract the line rate from the XML
            MIN_COVERAGE=$(awk "BEGIN {print int($MIN_COVERAGE * 100)}") # Turn into percentage, rounding down to avoid rounding issues
          fi

          echo "MIN_COVERAGE=$MIN_COVERAGE" >> "$GITHUB_OUTPUT"

      - name: Pre-build image and run unit tests with coverage in dev container
        uses: devcontainers/ci@v0.3
        with:
          imageName: ghcr.io/azure-samples/chat-with-your-data-solution-accelerator
          cacheFrom: ghcr.io/azure-samples/chat-with-your-data-solution-accelerator
          runCmd: make unittest optional_args="--junitxml=coverage-junit.xml --cov=. --cov-report xml:coverage.xml --cov-fail-under ${{ steps.coverage-value.outputs.MIN_COVERAGE }}"
          refFilterForPush: refs/heads/main
